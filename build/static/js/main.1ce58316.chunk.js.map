{"version":3,"sources":["components/SectionTitle/index.tsx","components/SongItem/index.tsx","components/SearchBar/index.tsx","components/CreatePlaylistForm/index.tsx","pages/HomePage.tsx","redux/token.js","redux/store.js","components/LoginButton/index.tsx","pages/LoginPage.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["SectionTitle","title","className","SongItem","button","status","pushToSelectedList","deleteFromSelectedList","id","imgUrl","songTitle","artistLink","artist","useState","statusState","setStatusState","showAlert","onClick","src","alt","href","SearchBar","getData","accessTokenBearer","useSelector","state","token","textInput","setTextInput","TextField","label","type","value","onChange","e","target","Button","variant","color","query","a","axios","get","headers","response","data","console","error","getSpotifySearch","CreatePlaylistForm","userId","selectedTracks","setTitle","description","setDescription","handleSubmit","preventDefault","endpoint","post","name","collaborative","public","method","url","uris","onSubmit","HomePage","listData","setData","selectedList","setSelectedList","setUserId","currentList","push","i","length","splice","getCurrentUserId","Authorization","tracks","items","map","item","getStatus","uri","album","images","artists","external_urls","spotify","tokenSlice","createSlice","initialState","reducers","getToken","accessToken","URLSearchParams","window","location","hash","substring","actions","configureStore","reducer","tokenReducer","LoginButton","REDIRECT_URL","process","LoginPage","App","dispatch","useDispatch","ThemeProvider","store","exact","path","component","log","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce58316.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n    title: string\n}\n\nconst SectionTitle = ({title}: Props) => {\n    return (\n        <h1 className=\"songsTitle\">{title}</h1>\n    );\n}\n\nexport default SectionTitle;\n\nSectionTitle.propTypes = {\n    title: PropTypes.string\n}","import React from 'react';\nimport { useState } from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n    status: boolean,\n    pushToSelectedList: any,\n    deleteFromSelectedList: any,\n    id: string,\n    imgUrl: string,\n    songTitle: string,\n    artistLink: string,\n    artist: string\n}\n\nconst SongItem = ({\n    status,pushToSelectedList,deleteFromSelectedList,id,imgUrl,songTitle,artistLink,artist\n}: Props) => {\n\n    const [statusState,setStatusState] = useState(status)\n\n    const showAlert = () => {\n        setStatusState(!statusState)\n        if (!statusState){\n            pushToSelectedList(id);\n        } else {\n            deleteFromSelectedList(id);\n        }\n    }\n\n    let button: any;\n    if (statusState === false){\n        button = <button className=\"selectButton\" onClick={showAlert}>Select</button>\n    } else {\n        button = <button className=\"deselectButton\" onClick={showAlert}>Deselect</button>\n    }\n\n    return (\n            <div className=\"itemContainer\">\n                <img src={imgUrl} alt={`${songTitle}`}/>\n                <p className=\"songTitle\">{songTitle}</p>\n                <a className=\"artist\" href={artistLink}>{artist}</a>\n                <br></br>\n                {button}\n            </div>\n    );\n}\n\nexport default SongItem;\n\nSongItem.propTypes = {\n    status: PropTypes.bool,\n    pushToSelectedList: PropTypes.any,\n    id: PropTypes.string,\n    deleteFromSelectedList: PropTypes.any,\n    imgUrl: PropTypes.string,\n    songTitle: PropTypes.string,\n    artistLink: PropTypes.string,\n    artist: PropTypes.string\n}","import React from 'react';\nimport { useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport './style.css';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, TextField } from '@material-ui/core';\n\ntype Props = {\n    getData: any\n}\n\nconst SearchBar = ({getData}: Props) => {\n\n    const {accessTokenBearer} = useSelector((state: any) => state.token)\n\n    const [textInput,setTextInput] = useState(\"\");\n\n    const handleChange = (e: any) => {\n        setTextInput(e.target.value);\n    }\n\n    const handleSearch = () => {\n        const query: string = textInput;\n        const BASE_URL: string = \"https://api.spotify.com/v1/search?q=\"\n        const getSpotifySearch = async() => {\n            try {\n                const response: AxiosResponse<any> = await axios.get(`${BASE_URL}${query}&type=track&limit=30`,{\n                    headers: {\n                        'Authorization': accessTokenBearer\n                    }\n                })\n                getData(response.data);\n            } catch(error){\n                console.error(error);\n            }\n        }\n        getSpotifySearch();\n    }\n\n    return(\n        <div>\n            <TextField className=\"textField\" label=\"Type in your album\" type=\"text\" value={textInput} onChange={handleChange}></TextField>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\n        </div>\n    );\n}\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n    getData: PropTypes.any\n}","import React from 'react';\nimport { useState } from 'react';\nimport './style.css';\nimport axios, { AxiosResponse } from 'axios';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, TextField } from '@material-ui/core';\n\ntype Props = {\n    userId: string,\n    selectedTracks: Array<string>\n}\n\nconst CreatePlaylistForm = ({userId,selectedTracks}: Props) => {\n\n    const {accessTokenBearer} = useSelector((state: any) => state.token)\n\n    const [title,setTitle] = useState(\"\");\n    const [description,setDescription] = useState(\"\");\n\n    const handleSubmit = async (e: React.ChangeEvent<any>) => {\n        e.preventDefault();\n        try {\n            const endpoint: string = `https://api.spotify.com/v1/users/${userId}/playlists`;\n            const response: AxiosResponse<any> = await axios.post(endpoint,{\n                name: title,\n                description: description,\n                collaborative: false,\n                public: false\n            },{\n                headers: {\n                    'Authorization': accessTokenBearer,\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            const id: string = response.data.id;\n            await axios({\n                method: 'post',\n                url: `https://api.spotify.com/v1/playlists/${id}/tracks`,\n                data: {\n                  uris: selectedTracks\n                },\n                headers: {\n                  'Authorization': accessTokenBearer,\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                }\n              })\n        } catch(error){\n            console.error(error);\n        }\n    }\n        \n\n    const handleTitle = (e: React.ChangeEvent<any>) => {\n        setTitle(e.target.value);\n    }\n\n    const handleDescription = (e: React.ChangeEvent<any>) => {\n        setDescription(e.target.value);\n    }\n    return (\n        <div>\n            <h3>Create Playlist</h3>\n            <form onSubmit={handleSubmit}>\n                <TextField className=\"textField\" variant=\"outlined\" label=\"Title\" onChange={handleTitle}/>\n                <TextField className=\"textField\" variant=\"outlined\" label=\"Description\" onChange={handleDescription}/>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreatePlaylistForm;\n\nCreatePlaylistForm.propTypes = {\n    userId: PropTypes.string,\n    selectedTracks: PropTypes.array,\n}","import React from 'react';\nimport { useState } from 'react';\nimport SectionTitle from '../components/SectionTitle/index';\nimport SongItem from '../components/SongItem/index';\nimport SearchBar from '../components/SearchBar/index';\nimport CreatePlaylistForm from '../components/CreatePlaylistForm/index';\nimport axios, { AxiosResponse } from 'axios';\nimport './style.css';\nimport { useSelector } from 'react-redux';\n\nconst HomePage = () => {\n    \n    const {accessTokenBearer} = useSelector((state: any) => state.token)\n\n    const initialData: any = null\n    const [data,setData] = useState(initialData);\n    const [selectedList,setSelectedList] = useState([\"\"]);\n    const [userId,setUserId] = useState(\"\");\n\n    const getData = (data: any) => {\n        setData(data);\n    }\n\n    const pushToSelectedList = (id: string) => {\n        const currentList: string[] = selectedList;\n        currentList.push(id);\n        setSelectedList(currentList);\n    }\n\n    const deleteFromSelectedList = (id: string) => {\n        const currentList: string[] = selectedList;\n        for (var i = 0;i<selectedList.length;i++){\n            if (selectedList[i] === id){\n                currentList.splice(i,1);\n            }\n        }\n        setSelectedList(currentList);\n    }\n\n    const getStatus = (id: string) => {\n        let status: boolean = false;\n        for (var i = 0;i<selectedList.length;i++){\n            if (selectedList[i] === id){\n                status = true\n            }\n        }\n        return status;\n    }\n\n    const getCurrentUserId = async() => {\n        try {\n            const response: AxiosResponse<any> = await axios.get(\"https://api.spotify.com/v1/me?\",{\n                headers: {\n                    Authorization: accessTokenBearer,\n                }\n            })\n            setUserId(response.data.id)\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n    let listData;\n    if (data != null){\n        listData = data.tracks.items.map((item: any)=>{\n            const status = getStatus(item.uri)\n            return (\n                <SongItem\n                    key = {item.id}\n                    imgUrl = {item.album.images[0].url}\n                    songTitle = {item.album.name}\n                    artist = {item.artists[0].name}\n                    artistLink = {item.artists[0].external_urls.spotify}\n                    id = {item.uri}\n                    status = {status}\n                    pushToSelectedList = {pushToSelectedList}\n                    deleteFromSelectedList = {deleteFromSelectedList}\n                />\n            )\n        })\n    }\n\n    getCurrentUserId();\n    return(\n        <div className=\"App\">\n            <CreatePlaylistForm userId={userId} selectedTracks={selectedList}></CreatePlaylistForm>\n            <SectionTitle title=\"Search your favorite albums!\"/>\n            <br></br>\n            <SearchBar getData={getData}></SearchBar>\n            <br></br>\n\n            <div className=\"grid-container\">\n                {listData}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default HomePage;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const tokenSlice = createSlice({\n    name: \"token\",\n    initialState: {\n        accessTokenBearer: \"\"\n    },\n    reducers: {\n        getToken: (state) => {\n            const urlSearchParams = new URLSearchParams(window.location.hash.substring(1));\n            const accessToken = urlSearchParams.get('access_token');\n            const accessTokenBearer = `Bearer ${accessToken}`;\n            state.accessTokenBearer = accessTokenBearer;\n        }\n    }\n});\n\nexport const {getToken} = tokenSlice.actions;\nexport default tokenSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\nimport tokenReducer from './token'\n\nexport default configureStore({\n    reducer: {\n        token: tokenReducer\n    }\n});","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport './style.css';\n\n\nconst LoginButton = () => {\n    const MY_WEBSITE: string = \"http://localhost:3000/callback\"\n    const REDIRECT_URL: string = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_CLIENT_ID}&response_type=token&redirect_uri=${MY_WEBSITE}&scope=playlist-modify-private`\n\n    return (\n        <a href={REDIRECT_URL}>\n            <Button variant=\"contained\" color=\"primary\" className=\"button\">Login</Button>\n        </a>\n    )\n    \n}\n\nexport default LoginButton;","import React from 'react';\nimport LoginButton from '../components/LoginButton/index.tsx';\n\nconst LoginPage = () => {\n\n\n    return (\n        <div>\n            <LoginButton/>\n        </div>\n    )\n}\n\nexport default LoginPage;","import './../src/App.css';\nimport React from 'react';\nimport 'regenerator-runtime/runtime';\nimport HomePage from './pages/HomePage.tsx';\nimport configureStore from './redux/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getToken } from './redux/token';\nimport LoginPage from './pages/LoginPage.jsx';\nimport { ThemeProvider } from '@material-ui/core';\n\n\nfunction App() {\n\n  const {accessTokenBearer} = useSelector((state) => state.token)\n  const dispatch = useDispatch();\n\n  function callbackComponent(){\n    dispatch(getToken());\n    let component;\n    if (accessTokenBearer!=\"Bearer null\" || accessTokenBearer!=\"\"){\n      console.log(`Current access token state: ${accessTokenBearer}`)\n      component = <Redirect to=\"/create-playlist\"/>\n    } else {\n      component = <LoginPage/>\n    }\n    return component;\n  }\n\n  function loginComponent(){\n    let component;\n    if (accessTokenBearer==\"Bearer null\" || accessTokenBearer == \"\"){\n      console.log(`Current access token state: ${accessTokenBearer}`)\n      component = <LoginPage/>\n    } else {\n      component = <Redirect to=\"/create-playlist\"/>\n    }\n    return component;\n  }\n\n  return (\n    <ThemeProvider>\n      <Provider store={configureStore}>\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route exact path=\"/create-playlist\">\n                <HomePage/>\n              </Route>\n              <Route exact path=\"/\">\n                {loginComponent}\n              </Route>\n              <Route path=\"/callback\">\n                {callbackComponent}\n              </Route>\n            </Switch>\n          \n          </div>\n        </Router>\n      </Provider>\n    </ThemeProvider>\n    \n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render( \n    <React.StrictMode >\n        <Provider store={configureStore}>\n            <App></App>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}